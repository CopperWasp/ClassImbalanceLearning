{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"baseline","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"56g3hQJ7DHbB","colab_type":"code","outputId":"538eb22f-71e2-4e73-9544-e01d5b3997ef","executionInfo":{"status":"ok","timestamp":1573688400742,"user_tz":360,"elapsed":28179,"user":{"displayName":"Ege Beyazıt","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDqLV_4GuV8zQApBx0FQZnBwgtdNoIo9u8C9JCluw=s64","userId":"02753041663080474765"}},"colab":{"base_uri":"https://localhost:8080/","height":124}},"source":["# hook Google Drive up\n","from google.colab import drive\n","drive.mount('/content/drive')\n","# import libraries and set the random seed\n","import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","np.random.seed(1)\n","# load data and fix the categorical data types\n","project_dir = './drive/My Drive/Colab Notebooks/medicare/NSF-Medicare/'\n","data_dir_ege = project_dir + 'master.pkl'\n","data_dir_su = project_dir + 'datasets/combi_catego_numeri_features.csv'\n","\n","data_ege = pd.read_pickle(data_dir_ege)\n","data_su = data = pd.read_csv(data_dir_su)\n","\n","del data_su['NPI']\n","\n","data_su['state_type'] = data['state_type'].astype('category') # for type consistency\n","data_su['label'] = data['label'].astype('category') # for type consistency\n","data_su['provider_type'] = data['provider_type'].astype('category') # for type consistency\n","data_su['state'] = data['state'].astype('category') # for type consistency\n","data_su['gender'] = data['gender'].astype('category') # for type consistency\n","\n","%matplotlib inline\n","plt.style.use('bmh')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdocs.test%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.photos.readonly%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fpeopleapi.readonly&response_type=code\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"iYeyWSvKDp5j","colab_type":"code","colab":{}},"source":["import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.svm import SVC\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","import collections\n","from sklearn.model_selection import GridSearchCV\n","import numpy as np # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","import tensorflow as tf\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.manifold import TSNE\n","from sklearn.decomposition import PCA, TruncatedSVD\n","import matplotlib.patches as mpatches\n","import time\n","from sklearn.model_selection import cross_val_score\n","from sklearn.model_selection import train_test_split\n","from sklearn.model_selection import StratifiedShuffleSplit\n","from sklearn.model_selection import KFold, StratifiedKFold\n","\n","# Classifier Libraries\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.svm import SVC\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","import collections\n","from imblearn.over_sampling import SMOTE\n","from sklearn.model_selection import train_test_split, RandomizedSearchCV\n","\n","\n","import time\n","from sklearn.manifold import TSNE\n","from sklearn.decomposition import PCA, TruncatedSVD\n","import matplotlib.patches as mpatches\n","from imblearn.under_sampling import NearMiss\n","\n","# Other Libraries\n","from sklearn.model_selection import train_test_split\n","from sklearn.pipeline import make_pipeline\n","from imblearn.pipeline import make_pipeline as imbalanced_make_pipeline\n","from imblearn.over_sampling import SMOTE\n","from imblearn.under_sampling import NearMiss\n","from imblearn.metrics import classification_report_imbalanced\n","from sklearn.metrics import precision_score, recall_score, f1_score, roc_auc_score, accuracy_score, classification_report\n","from collections import Counter\n","from sklearn.model_selection import KFold, StratifiedKFold\n","import warnings\n","\n","import imblearn\n","\n","def get_equal_sample(data, label):\n","    sample_size = min(len(data.loc[data[label] == 1]), len(data.loc[data['label'] == 0]))\n","    return data.groupby(label).apply(lambda x: x.sample(sample_size))\n","\n","\n","def plot_feature_correlations(data):\n","    sample = get_equal_sample(data, 'label')\n","    sub_sample_corr = sample.corr()\n","    plt.figure(figsize = (24,20))\n","    sns.heatmap(sub_sample_corr[(sub_sample_corr >= 0.2) | (sub_sample_corr <= -0.2)], cmap='coolwarm_r', annot_kws={'size':30})\n","    return plt\n","\n","\n","def get_numeric_features(data):\n","    return data.select_dtypes(include=['float64', 'int64'])\n","\n","\n","def cluster_visualize(data):\n","    sample = get_equal_sample(data, 'label')\n","    X = sample.drop('label', axis=1)\n","    y = sample['label']\n","\n","    X_reduced_tsne = TSNE(n_components=2, random_state=42).fit_transform(X.values)\n","    X_reduced_pca = PCA(n_components=2, random_state=42).fit_transform(X.values)\n","    X_reduced_svd = TruncatedSVD(n_components=2, algorithm='randomized', random_state=42).fit_transform(X.values)\n","\n","    f, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(24,6))\n","    f.suptitle('Clusters using Dimensionality Reduction', fontsize=14)\n","    blue_patch = mpatches.Patch(color='#0A0AFF', label='No Fraud')\n","    red_patch = mpatches.Patch(color='#AF0000', label='Fraud')\n","    # t-SNE scatter plot\n","    ax1.scatter(X_reduced_tsne[:,0], X_reduced_tsne[:,1], c=(y == 0), cmap='coolwarm', label='No Fraud', linewidths=2)\n","    ax1.scatter(X_reduced_tsne[:,0], X_reduced_tsne[:,1], c=(y == 1), cmap='coolwarm', label='Fraud', linewidths=2)\n","    ax1.set_title('t-SNE', fontsize=14)\n","    ax1.grid(True)\n","    ax1.legend(handles=[blue_patch, red_patch])\n","\n","    # PCA scatter plot\n","    ax2.scatter(X_reduced_pca[:,0], X_reduced_pca[:,1], c=(y == 0), cmap='coolwarm', label='No Fraud', linewidths=2)\n","    ax2.scatter(X_reduced_pca[:,0], X_reduced_pca[:,1], c=(y == 1), cmap='coolwarm', label='Fraud', linewidths=2)\n","    ax2.set_title('PCA', fontsize=14)\n","    ax2.grid(True)\n","    ax2.legend(handles=[blue_patch, red_patch])\n","\n","    # TruncatedSVD scatter plot\n","    ax3.scatter(X_reduced_svd[:,0], X_reduced_svd[:,1], c=(y == 0), cmap='coolwarm', label='No Fraud', linewidths=2)\n","    ax3.scatter(X_reduced_svd[:,0], X_reduced_svd[:,1], c=(y == 1), cmap='coolwarm', label='Fraud', linewidths=2)\n","    ax3.set_title('Truncated SVD', fontsize=14)\n","    ax3.grid(True)\n","    ax3.legend(handles=[blue_patch, red_patch])\n","\n","    return plt\n","\n","\n","# https://imbalanced-learn.readthedocs.io/en/stable/api.html#module-imblearn.over_sampling\n","def cv_grid_search(sampling, X, y, model_indices=False):\n","    log_reg_params = {\"penalty\": ['l1', 'l2'], 'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000]}\n","    knears_params = {\"n_neighbors\": list(range(2,5,1)), 'algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute']}\n","    svc_params = {'C': [0.5, 0.7, 0.9, 1], 'kernel': ['rbf', 'poly', 'sigmoid', 'linear']}\n","    tree_params = {\"criterion\": [\"gini\", \"entropy\"], \"max_depth\": list(range(2,4,1)), \"min_samples_leaf\": list(range(5,7,1))}\n","\n","    grid_log_reg = GridSearchCV(LogisticRegression(solver='saga'), log_reg_params, cv=5)\n","    grid_knears = GridSearchCV(KNeighborsClassifier(), knears_params, cv=5)\n","    grid_svc = GridSearchCV(SVC(gamma='auto'), svc_params, cv=5)\n","    grid_tree = GridSearchCV(DecisionTreeClassifier(), tree_params, cv=5)\n","\n","    models = np.array([grid_log_reg, grid_knears, grid_svc, grid_tree])\n","    best_ests = []\n","    if model_indices:\n","        models = models[model_indices]\n","\n","    for model in models:\n","        print(\"Model: \" + str(model))\n","        # prepare initial train and test\n","        splitter = StratifiedKFold(n_splits=5, random_state=None, shuffle=False)\n","        for train_index, test_index in splitter.split(X, y):\n","            X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n","            y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n","\n","        # Turn into an array\n","        X_train, X_test = X_train.values, X_test.values\n","        y_train, y_test = y_train.values, y_test.values\n","\n","        # List to append the score and then find the average\n","        accuracy_lst, precision_lst = [], []\n","        recall_lst, f1_lst = [], []\n","        auc_lst = []\n","\n","        for train, test in splitter.split(X_train, y_train):\n","            pipeline = imbalanced_make_pipeline(sampling, model)\n","            mod = pipeline.fit(X_train[train], y_train[train])\n","            best_est = model.best_estimator_\n","            prediction = best_est.predict(X_train[test])\n","\n","            accuracy_lst.append(pipeline.score(X_train[test], y_train[test]))\n","            precision_lst.append(precision_score(y_train[test], prediction))\n","            recall_lst.append(recall_score(y_train[test], prediction))\n","            f1_lst.append(f1_score(y_train[test], prediction))\n","            auc_lst.append(roc_auc_score(y_train[test], prediction))\n","\n","\n","        print(\"accuracy: {}\".format(np.mean(accuracy_lst)))\n","        print(\"precision: {}\".format(np.mean(precision_lst)))\n","        print(\"recall: {}\".format(np.mean(recall_lst)))\n","        print(\"f1: {}\".format(np.mean(f1_lst)))\n","        print(\"AUC: {}\".format(np.mean(auc_lst)))\n","\n","        best_ests.append(best_est)\n","    return best_ests\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"F7yqx6nqEECn","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jIyH9mN0FEPr","colab_type":"code","colab":{}},"source":["  "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jwc_bdl3E_9W","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"BEH4osVWFpUK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":524},"outputId":"4732fbde-e543-4ca5-c6a2-38b8f94c90a5","executionInfo":{"status":"ok","timestamp":1573689920939,"user_tz":360,"elapsed":570409,"user":{"displayName":"Ege Beyazıt","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDqLV_4GuV8zQApBx0FQZnBwgtdNoIo9u8C9JCluw=s64","userId":"02753041663080474765"}}},"source":["from imblearn.over_sampling import SMOTE\n","from imblearn.under_sampling import RandomUnderSampler\n","\n","X = data_ege.drop('label', axis=1)\n","y = data_ege['label']\n","\n","sampler = RandomUnderSampler(random_state=42) #SMOTE(sampling_strategy='minority')\n","cv_grid_search(sampler, X, y, [1])"],"execution_count":15,"outputs":[{"output_type":"stream","text":["Model: GridSearchCV(cv='warn', error_score='raise-deprecating',\n","             estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30,\n","                                            metric='minkowski',\n","                                            metric_params=None, n_jobs=None,\n","                                            n_neighbors=5, p=2,\n","                                            weights='uniform'),\n","             iid='warn', n_jobs=None,\n","             param_grid={'algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'],\n","                         'n_neighbors': [2, 3, 4]},\n","             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n","             scoring=None, verbose=0)\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n","  warnings.warn(CV_WARNING, FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n","  warnings.warn(CV_WARNING, FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n","  warnings.warn(CV_WARNING, FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n","  warnings.warn(CV_WARNING, FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n","  warnings.warn(CV_WARNING, FutureWarning)\n"],"name":"stderr"},{"output_type":"stream","text":["accuracy: 0.7168105341488422\n","precision: 0.0019733132377358796\n","recall: 0.6345203488372093\n","f1: 0.003933825768079107\n","AUC: 0.6757007332249554\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["[KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n","                      metric_params=None, n_jobs=None, n_neighbors=4, p=2,\n","                      weights='uniform')]"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"id":"K1km8wGGF3gj","colab_type":"code","colab":{}},"source":["Fsage"],"execution_count":0,"outputs":[]}]}